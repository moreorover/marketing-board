services:
  # PostgreSQL Database
  postgres:
    container_name: postgres
    image: postgres
    environment:
      POSTGRES_DB: marketing_board
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Server Application
  server:
    container_name: server
    build:
      context: .
      dockerfile: Dockerfile.server
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-password}@postgres:5432/marketing_board
      - BETTER_AUTH_SECRET=${BETTER_AUTH_SECRET}
      - BETTER_AUTH_URL=${BETTER_AUTH_URL:-https://localhost}
      - CORS_ORIGIN=${CORS_ORIGIN:-https://localhost}
      - DO_SPACES_ENDPOINT=${DO_SPACES_ENDPOINT:-https://ams3.digitaloceanspaces.com}
      - DO_SPACES_ACCESS_KEY=${DO_SPACES_ACCESS_KEY}
      - DO_SPACES_SECRET_KEY=${DO_SPACES_SECRET_KEY}
      - DO_SPACES_BUCKET=${DO_SPACES_BUCKET:-marketing-galery}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Web Application
  web:
    container_name: web
    build:
      context: .
      dockerfile: Dockerfile.web
      args:
        - VITE_SERVER_URL=${VITE_SERVER_URL:-https://localhost}
    depends_on:
      - server
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Caddy Reverse Proxy
  caddy:
    image: caddy:2-alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
    environment:
      - DOMAIN=${DOMAIN:-localhost}
    depends_on:
      - server
      - web
    networks:
      - app-network
    restart: unless-stopped

volumes:
  postgres_data:
  caddy_data:
  caddy_config:

networks:
  app-network:
    driver: bridge
